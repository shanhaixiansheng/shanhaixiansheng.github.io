<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RobotStudio多机器人协同工作站</title>
      <link href="/post/934fc5e6.html"/>
      <url>/post/934fc5e6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=468121088&bvid=BV1y5411U7BR&cid=570673821&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><p>RobotStudio多机器人协同工作站</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自动运行框架思路</title>
      <link href="/post/2f7bcbe3.html"/>
      <url>/post/2f7bcbe3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=479708476&bvid=BV1rM411A7dJ&cid=1015362551&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><p>自动运行框架思路分享。感谢大家观看</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python笔记之函数与模块的作用</title>
      <link href="/post/33a40e2e.html"/>
      <url>/post/33a40e2e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="函数的作用"><a href="#函数的作用" class="headerlink" title="函数的作用"></a>函数的作用</h1><p>不知道大家是否注意到，在上面的代码中，我们做了3次求阶乘，这样的代码实际上就是重复代码。编程大师<em>Martin Fowler</em>先生曾经说过：“<strong>代码有很多种坏味道，重复是最坏的一种！</strong>”，要写出高质量的代码首先要解决的就是重复代码的问题。对于上面的代码来说，我们可以将计算阶乘的功能封装到一个称之为“函数”的功能模块中，在需要计算阶乘的地方，我们只需要“调用”这个“函数”就可以了。</p><h1 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h1><p>在Python中可以使用<code>def</code>关键字来定义函数，和变量一样每个函数也有一个响亮的名字，而且命名规则跟变量的命名规则是一致的。在函数名后面的圆括号中可以放置传递给函数的参数，这一点和数学上的函数非常相似，程序中函数的参数就相当于是数学上说的函数的自变量，而函数执行完成后我们可以通过<code>return</code>关键字来返回一个值，这相当于数学上说的函数的因变量。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pytho笔记之构造程序逻辑</title>
      <link href="/post/20df48db.html"/>
      <url>/post/20df48db.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="构造程序逻辑"><a href="#构造程序逻辑" class="headerlink" title="构造程序逻辑"></a>构造程序逻辑</h1><p>对于编程语言的初学者来说，在学习了Python的核心语言元素（变量、类型、运算符、表达式、分支结构、循环结构等）之后，必须做的一件事情就是尝试用所学知识去解决现实中的问题，换句话说就是锻炼自己把用人类自然语言描述的算法（解决问题的方法和步骤）翻译成Python代码的能力，而这件事情必须通过大量的练习才能达成。</p><h1 id="经典的例子"><a href="#经典的例子" class="headerlink" title="经典的例子"></a>经典的例子</h1><ol><li><p>寻找<strong>水仙花数</strong>。</p><blockquote><p><strong>说明</strong>：水仙花数也被称为超完全数字不变数、自恋数、自幂数、阿姆斯特朗数，它是一个3位数，该数字每个位上数字的立方之和正好等于它本身，例如：$1^3 + 5^3+ 3^3&#x3D;153$。</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">找出所有水仙花数</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>, <span class="hljs-number">1000</span>):<span class="hljs-comment"># range建立数组</span><br>    low = num % <span class="hljs-number">10</span><br>    mid = num // <span class="hljs-number">10</span> % <span class="hljs-number">10</span><br>    high = num // <span class="hljs-number">100</span><br>    <span class="hljs-keyword">if</span> num == low ** <span class="hljs-number">3</span> + mid ** <span class="hljs-number">3</span> + high ** <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><p>上面的代码中，我们通过整除和求模运算分别找出了一个三位数的个位、十位和百位，这种小技巧在实际开发中还是常用的。用类似的方法，我们还可以实现将一个正整数反转，例如：将12345变成54321，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;num = &#x27;</span>))<br> reversed_num = <span class="hljs-number">0</span>  <span class="hljs-comment">#reversed反转函数，返回一个反转的迭代器</span><br> <span class="hljs-keyword">while</span> num &gt; <span class="hljs-number">0</span>:<br>     reversed_num = reversed_num * <span class="hljs-number">10</span> + num % <span class="hljs-number">10</span><br>     num //= <span class="hljs-number">10</span><br> <span class="hljs-built_in">print</span>(reversed_num)<br></code></pre></td></tr></table></figure><h2 id="百鸡百钱"><a href="#百鸡百钱" class="headerlink" title="百鸡百钱"></a>百鸡百钱</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">《百钱百鸡》问题</span><br><span class="hljs-string">说明：百钱百鸡是我国古代数学家张丘建在《算经》一书中提出的数学问题：</span><br><span class="hljs-string">鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。</span><br><span class="hljs-string">百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？翻译成现代文是：公鸡5元一只，母鸡3元一只，小鸡1元三只，</span><br><span class="hljs-string">用100块钱买一百只鸡，问公鸡、母鸡、小鸡各有多少只？</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">20</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">33</span>):<br>        z= <span class="hljs-number">100</span>-x-y<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">100</span>==<span class="hljs-number">5</span>*x+<span class="hljs-number">3</span>*y+z/<span class="hljs-number">3</span>:<br>            <span class="hljs-built_in">print</span>(x,y,z)<br></code></pre></td></tr></table></figure><p>上面使用的方法叫做<strong>穷举法</strong>，也称为<strong>暴力搜索法</strong>，这种方法通过一项一项的列举备选解决方案中所有可能的候选项并检查每个候选项是否符合问题的描述，最终得到问题的解。这种方法看起来比较笨拙，但对于运算能力非常强大的计算机来说，通常都是一个可行的甚至是不错的选择，而且问题的解如果存在，这种方法一定能够找到它。</p><h2 id="CRAPS赌博游戏。"><a href="#CRAPS赌博游戏。" class="headerlink" title="CRAPS赌博游戏。"></a><strong>CRAPS赌博游戏</strong>。</h2><p><strong>说明</strong>：CRAPS又称花旗骰，是美国拉斯维加斯非常受欢迎的一种的桌上赌博游戏。该游戏使用两粒骰子，玩家通过摇两粒骰子获得点数进行游戏。简单的规则是：玩家第一次摇骰子如果摇出了7点或11点，玩家胜；玩家第一次如果摇出2点、3点或12点，庄家胜；其他点数玩家继续摇骰子，如果玩家摇出了7点，庄家胜；如果玩家摇出了第一次摇的点数，玩家胜；其他点数，玩家继续要骰子，直到分出胜负。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint <span class="hljs-comment">#调用随机函数random 数组函数randint</span><br><br>zongzichan=<span class="hljs-number">1000</span>  <span class="hljs-comment">#这是我们的赌博资产，哈哈，就在这个的基础上进行加减，</span><br><span class="hljs-keyword">while</span> zongzichan&gt;<span class="hljs-number">0</span>: <span class="hljs-comment">#外循环，赌资就是我们的入场券，大于0就可以进入赌场了（循环内）</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你的总资产为&#x27;</span>,zongzichan) <span class="hljs-comment">#print 打印输出，告诉我们的资产有多少</span><br>    bu=<span class="hljs-literal">False</span> <span class="hljs-comment">#步，因为游戏规则的限制，所以，我们要在第一轮摇骰子时，</span><br>             <span class="hljs-comment">#将第一次判断用不到的放在后面，接着往下看</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>: <span class="hljs-comment">#嵌套内循环，True让它直接通过，不用再验证</span><br>        xz=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请下注&#x27;</span>)) <span class="hljs-comment">#要下注了，下多少赢回来多少，或者输多少</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span>&lt;xz&lt;=zongzichan: <span class="hljs-comment">#判断，我们下注是否大于0小于我们的总额度</span><br>            <span class="hljs-keyword">break</span> <span class="hljs-comment">#跳出循环，执行下面的程序</span><br>    dianshu=randint(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>)+randint(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>) <span class="hljs-comment">#因为有两个骰子，所以这里要将两个骰子的数加起来，</span><br>                                       <span class="hljs-comment">#randint建立两个1到6数组</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;玩家摇出了&#x27;</span>,dianshu,<span class="hljs-string">&#x27;点&#x27;</span>) <span class="hljs-comment">#输出我们摇出来点数</span><br>    <span class="hljs-keyword">if</span> dianshu==<span class="hljs-number">7</span> <span class="hljs-keyword">or</span> dianshu==<span class="hljs-number">11</span>: <span class="hljs-comment">#判断，当玩家第一次摇出了7或者11点，玩家胜</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;玩家胜&#x27;</span>)<br>        zongzichan+=xz <span class="hljs-comment">#给我们的财产加钱，同时进行下一次下注，也就是从上往下重新执行程序</span><br>    <span class="hljs-keyword">elif</span> dianshu==<span class="hljs-number">2</span> <span class="hljs-keyword">or</span> dianshu==<span class="hljs-number">3</span> <span class="hljs-keyword">or</span> dianshu==<span class="hljs-number">12</span>: <span class="hljs-comment">#或者玩家第一次摇到了2,3,12，点，</span><br>                                                   <span class="hljs-comment">#那么庄家胜</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;庄家胜&#x27;</span>)<br>        zongzichan-=xz <span class="hljs-comment">#财产-n</span><br>    <span class="hljs-keyword">else</span>:<br>        bu=<span class="hljs-literal">True</span> <span class="hljs-comment">#又或者，上面的几个都没有摇到，</span><br>    <span class="hljs-keyword">while</span> bu: <span class="hljs-comment">#进入这个循环</span><br>        bu=<span class="hljs-literal">False</span> <span class="hljs-comment">#复位bu</span><br>        er=randint(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>)+randint(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>) <span class="hljs-comment">#这里我们就要新建变量，不能用第一次的那个计数的了</span><br>        <span class="hljs-comment"># 因为第一次比如摇到了2,3,7,11,12点，这几个在第一次的判断中都是直接通过的，</span><br>        <span class="hljs-comment"># 但是没有摇到的话，就会到了这里，</span><br>        <span class="hljs-comment"># 比如在这里，第三次第四次都没有摇到与这个循环相匹配的点数，</span><br>        <span class="hljs-comment">#那就会一直循环，直到判断成功，决出胜负</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;玩家摇出了&#x27;</span>,er,<span class="hljs-string">&#x27;点&#x27;</span>)<br>        <span class="hljs-keyword">if</span> er==<span class="hljs-number">7</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;庄家胜&#x27;</span>)<br>            zongzichan-=xz<br>        <span class="hljs-keyword">elif</span> er==dianshu:  <span class="hljs-comment">#这个就是用在这个循环中摇的点数比较前面那个循环之前的点数，</span><br>                          <span class="hljs-comment">#如果一样，就是玩家胜出</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;玩家胜&#x27;</span>)<br>            zongzichan+=xz<br>        <span class="hljs-keyword">else</span>:<br>            bu=<span class="hljs-literal">True</span> <span class="hljs-comment">#这里起到了关键作用，这个循环内，点数不符合，就会执行它，</span><br>                    <span class="hljs-comment">#然后重新进入本次循环，知道决出胜负</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你破产了，等着被收债吧&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记3</title>
      <link href="/post/b470e876.html"/>
      <url>/post/b470e876.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>我们在写程序的时候，一定会遇到需要重复执行某条或某些指令的场景。例如用程序控制机器人踢足球，<br>如果机器人持球而且还没有进入射门范围，那么我们就要一直发出让机器人向球门方向移动的指令。在这个场景中，<br>让机器人向球门方向移动就是一个需要重复的动作，当然这里还会用到上一课讲的分支结构来判断机器人是否持球以及是否进入射门范围。<br>再举一个简单的例子，<br>如果要实现每隔1秒中在屏幕上打印一次“hello, world”并持续打印一个小时，<br>我们肯定不能够直接把print(‘hello, world’)这句代码写3600遍，这里同样需要循环结构。<br>循环结构就是程序中控制某条或某些指令重复执行的结构。</p><p>在Python中构造循环结构有两种做法，一<strong>种是for-in循环</strong>，<strong>一种是while循环</strong>。  </p><h2 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h2><p>如果明确的知道循环执行的次数或者要对一个容器进行迭代，<br>那么我们推荐使用for-in循环，例如下面代码中计算1~100求和的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">用for循环实现1~100求和</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    <span class="hljs-built_in">sum</span> += x <span class="hljs-comment">#sum += x相当于sum =s um+x</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><p>需要说明的是上面代码中的range(1, 101)可以用来构造一个从1到100的范围，<br>当我们把这样一个范围放到for-in循环中，就可以通过前面的循环变量x依次取出从1到100的整数。<br>当然，range的用法非常灵活，下面给出了一个例子：  </p><p><code>range</code>(101)：可以用来产生0到100范围的整数，需要注意的是取不到101。<br><code>range</code>(1, 101)：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。<br><code>range</code>(1, 101, 2)：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。<br><code>range</code>(100, 0, -2)：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。<br>知道了这一点，我们可以用下面的代码来实现1~100之间的偶数求和。</p><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用<code>while</code>循环。<code>while</code>循环通过一个能够产生或转换出<code>bool</code>值的表达式来控制循环，表达式的值为<code>True</code>则继续循环；表达式的值为<code>False</code>则结束循环。</p><h2 id="猜数字游戏"><a href="#猜数字游戏" class="headerlink" title="猜数字游戏"></a>猜数字游戏</h2><p>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#猜数字游戏</span><br><span class="hljs-keyword">import</span> random <span class="hljs-comment">#引入随机代码块</span><br>suiji = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>)  <span class="hljs-comment">#随机在1..1000之间产生一个数 </span><br>cishu=<span class="hljs-number">0</span> <span class="hljs-comment">#所用次数</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>: <span class="hljs-comment">#条件为真，一直保持循环，除非break跳出循环</span><br>    cishu+=<span class="hljs-number">1</span> <span class="hljs-comment">#次数=次数+1</span><br>    inpnt=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入：&#x27;</span>)) <span class="hljs-comment">#输入int整数</span><br>    <span class="hljs-keyword">if</span> inpnt&gt; suiji:  <span class="hljs-comment">#判断大小，当输入的值大于随机产生的数时，则输出一个大了一点</span><br>        <span class="hljs-built_in">print</span>((<span class="hljs-string">&#x27;数字大了一点&#x27;</span>))<br>    <span class="hljs-keyword">elif</span> inpnt&lt;suiji: <span class="hljs-comment">#判断大小，当输入的值大于随机产生的数时，则输出一个小了一点</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;数字小了一点&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;恭喜你答对了&#x27;</span>)<br><br>        <span class="hljs-keyword">break</span> <span class="hljs-comment">#跳出循环</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你总共猜了&#x27;</span>, cishu, <span class="hljs-string">&#x27;次&#x27;</span>) <span class="hljs-comment">#这里也可以用print(&#x27;你总共猜了%d次&#x27; % cishu)</span><br> <span class="hljs-comment">#上面的print函数中输出的字符串使用了占位符语法，</span><br> <span class="hljs-comment">#其中%d是整数的占位符，%f是小数的占位符，%%表示百分号（因为百分号代表了占位符，</span><br> <span class="hljs-comment">#所以带占位符的字符串中要表示百分号必须写成%%），</span><br> <span class="hljs-comment">#字符串之后的%后面跟的变量值会替换掉占位符然后输出到终端中</span><br><span class="hljs-keyword">if</span> cishu&gt;<span class="hljs-number">15</span>:<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你智商是不是欠费了&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python笔记2</title>
      <link href="/post/a6733633.html"/>
      <url>/post/a6733633.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="else语句练习"><a href="#else语句练习" class="headerlink" title="else语句练习"></a>else语句练习</h1><p>通过for语句进行循环，通过定义pwd，打印输出“请输入密码”由if语句进行判断，当pwd等于9999，当input输入值为9999即为密码正确，else（否则）密码不正确。等错误三次后，外部的else语句，就会执行，同时退出代码运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 开发时间：2023/2/13 19:41</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    pwd=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密码&#x27;</span>)<br>    <span class="hljs-keyword">if</span> pwd==<span class="hljs-string">&#x27;9999&#x27;</span>:<br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码正确&#x27;</span>)<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码不正确&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对不起，三次均为错误&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://s1.ax1x.com/2023/02/13/pSoNWz8.png"> </p><h2 id="训练2"><a href="#训练2" class="headerlink" title="训练2"></a>训练2</h2><p>套入while语句，定义变量a,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">0</span>  <span class="hljs-comment">#初始化变量</span><br><span class="hljs-keyword">while</span> a&lt;<span class="hljs-number">3</span>:  <br>    pwd=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密码&#x27;</span>)<br>    <span class="hljs-keyword">if</span> pwd==<span class="hljs-string">&#x27;000&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码正确&#x27;</span>)<br>        <span class="hljs-keyword">break</span>  <span class="hljs-comment">#结束循环</span><br>    <span class="hljs-keyword">else</span>:<br>        a+=<span class="hljs-number">1</span>  <span class="hljs-comment">#改变变量，当每次执行else语句时，a+1次，当大于等于3时，则执行外部的else语句</span><br>              <span class="hljs-comment"># 同时打印输出。</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码错误&#x27;</span>)<br><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;三次已过，请重新运行&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://s1.ax1x.com/2023/02/13/pSoNWz8.png"> </p><h1 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h1><p><img src="https://s1.ax1x.com/2023/02/13/pSotRu4.png" alt=" "></p><p><strong>要求：</strong> 输出一个三行四列的矩阵</p><p>外层控制打印行数，内层控制打印每一行的个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;输出一个三行四列的矩阵&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>): <span class="hljs-comment">#行表，执行三次，一次一行，1到4代表打印3行，</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>): <span class="hljs-comment">#打印输出每一行的个数，1到5代表打印4个，</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>,end=<span class="hljs-string">&#x27;\t&#x27;</span>) <span class="hljs-comment">#不换行输出</span><br>    <span class="hljs-built_in">print</span>() <span class="hljs-comment">#打行</span><br><span class="hljs-string">&#x27;&#x27;&#x27;输出三角矩阵&#x27;&#x27;&#x27;</span>  <span class="hljs-comment">#对比不同的地方，只需要在将for j in range(1,5)改为for j in range(1,i+1)</span><br>                     <span class="hljs-comment">#这样每次执行，当i等于1时，就会输出1，然后加一，输出2，再加一，输出3，直到第十</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>): <span class="hljs-comment">#行表，执行三次，一次一行，1到4代表打印3行，</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>): <span class="hljs-comment">#打印输出每一行的个数，1到5代表打印4个，</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>,end=<span class="hljs-string">&#x27;\t&#x27;</span>) <span class="hljs-comment">#不换行输出</span><br>    <span class="hljs-built_in">print</span>() <span class="hljs-comment">#打行</span><br></code></pre></td></tr></table></figure><p>运行结果1</p><p><img src="https://s1.ax1x.com/2023/02/13/pSoUpw9.png"></p><p>运行结果2</p><p><img src="https://s1.ax1x.com/2023/02/13/pSod3qg.png"></p><h1 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h1><p>将华氏温度转换为摄氏温度<br>提示：华氏温度到摄氏温度的转换公式为：$C&#x3D;(F - 32) \div 1.8</p><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">将华氏温度转换为摄氏温度</span><br><span class="hljs-string">提示：华氏温度到摄氏温度的转换公式为：$C=(F - 32) \div 1.8$。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>f = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入华氏温度&#x27;</span>)) <span class="hljs-comment">#通过input函数调佣输入框，float将字符创转为浮点数</span><br>c=(f-<span class="hljs-number">32</span>)/<span class="hljs-number">1.8</span> <span class="hljs-comment">#通过公式，f为输入值，减去32，并除以1.8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;摄氏温度&#x27;</span>,c) <span class="hljs-comment">#最终得到摄氏温度，</span><br><span class="hljs-comment">#缺点，没有保留小数点后一位，</span><br><span class="hljs-comment">#改动</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%.1f华氏度&#x27;</span>%(c))<br><span class="hljs-comment"># %.1f表示这是一个浮点数，小数点后保留1位有效数字。字符串之后的%后面跟的变量值会替换掉占位符然后输出到终端中</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>说明：在使用<span class="hljs-built_in">print</span>函数输出时，也可以对字符串内容进行格式化处理，<br>上面<span class="hljs-built_in">print</span>函数中的字符串%<span class="hljs-number">1.</span>f是一个占位符，稍后会由一个<span class="hljs-built_in">float</span>类型的变量值替换掉它。<br>同理，如果字符串中有%d，后面可以用一个<span class="hljs-built_in">int</span>类型的变量值替换掉它，而%s会被字符串的值替换掉。<br>除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中&#123;f:<span class="hljs-number">.1</span>f&#125;和&#123;c:<span class="hljs-number">.1</span>f&#125;可以先看成是&#123;f&#125;和&#123;c&#125;，<br>表示输出时会用变量f和变量c的值替换掉这两个占位符，后面的:<span class="hljs-number">.1</span>f表示这是一个浮点数，小数点后保留<span class="hljs-number">1</span>位有效数字。<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">f = float(input(&#x27;请输入华氏温度: &#x27;))</span><br><span class="hljs-string">c = (f - 32) / 1.8</span><br><span class="hljs-string">print(&#x27;%.1f华氏度 = %.1f摄氏度&#x27; % (f, c))</span><br><span class="hljs-string"></span><br><span class="hljs-string">print(f&#x27;&#123;f:.1f&#125;华氏度 = &#123;c:.1f&#125;摄氏度&#x27;)</span><br></code></pre></td></tr></table></figure><h1 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h1><h4 id="输入圆的半径计算周长和面积。"><a href="#输入圆的半径计算周长和面积。" class="headerlink" title="输入圆的半径计算周长和面积。"></a>输入圆的半径计算周长和面积。</h4><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入圆的半径计算周长和面积。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>banjing=<span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入半径&#x27;</span>))<br>zhouchang=<span class="hljs-number">2</span>*<span class="hljs-number">3.1416</span>*banjing<br>mianji=banjing*banjing<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;周长：%.2f&#x27;</span>%zhouchang) <span class="hljs-comment">#%.2f保留有效数字小数点后两位</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;面积:%.2f&#x27;</span>%mianji)<br></code></pre></td></tr></table></figure><h1 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h1><p>输入年份判断是不是闰年。<br>输入年份 如果是闰年输出True 否则输出False</p><p>提示：</p><p>当年年份整除4，再整除100，那这一年就是闰年，</p><p>当年年份整除4，再整除400，那这一年就是闰年，</p><p>参考答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">输入年份判断是不是闰年。</span><br><span class="hljs-string">输入年份 如果是闰年输出True 否则输出False</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>panduan=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入年份&#x27;</span>))<br>shuchu=panduan%<span class="hljs-number">4</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> panduan%<span class="hljs-number">100</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> panduan%<span class="hljs-number">400</span>==<span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(shuchu)<br></code></pre></td></tr></table></figure><p>说明：<strong>说明</strong>：比较运算符会产生布尔值，而逻辑运算符<code>and</code>和<code>or</code>会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出<code>True</code>，平年输出<code>False</code></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>对数组列表进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#对列表进行排序</span><br>L=[<span class="hljs-number">10121</span>,<span class="hljs-number">12</span>,<span class="hljs-number">11112</span>,<span class="hljs-number">1214</span>,<span class="hljs-number">124</span>,<span class="hljs-number">214143214</span>,<span class="hljs-number">12414</span>,<span class="hljs-number">213</span>,<span class="hljs-number">34</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(L,reverse=<span class="hljs-literal">True</span>))<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">sorted() 函数不会改变所传入的序列，而是返回一个新的、排序好的列表。</span><br><span class="hljs-string"></span><br><span class="hljs-string">除此之外，sorted(）函数默认对序列中元素进行升序排序，通过手动将其 reverse 参数值改为 True，可实现降序排序。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>说明：通过sorted()函数进行排序，默认的排序为升序，从小到大排列，可以再加入reverse&#x3D;true，改为降序，</p><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>迄今为止，我们写的Python代码都是一条一条语句顺序执行，这种代码结构通常称之为顺序结构。然而仅有顺序结构并不能解决所有的问题，比如我们设计一个游戏，游戏第一关的通关条件是玩家获得1000分，那么在完成本局游戏后，我们要根据玩家得到分数来决定究竟是进入第二关，还是告诉玩家“Game Over”，这里就会产生两个分支，而且这两个分支只有一个会被执行。类似的场景还有很多，我们将这种结构称之为“分支结构”或“选择结构”。给大家一分钟的时间，你应该可以想到至少5个以上这样的例子，赶紧试一试。</p><h3 id="if语句的使用"><a href="#if语句的使用" class="headerlink" title="if语句的使用"></a>if语句的使用</h3><p>在Python中，要构造分支结构可以使用<code>if</code>、<code>elif</code>和<code>else</code>关键字。所谓<strong>关键字</strong>就是有特殊含义的单词，像<code>if</code>和<code>else</code>就是专门用于构造分支结构的关键字，很显然你不能够使用它作为变量名（事实上，用作其他的标识符也是不可以）。下面的例子中演示了如何构造一个分支结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">yonghu=(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入账户:&#x27;</span>))<br>mima=(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密码:&#x27;</span>))<br><span class="hljs-keyword">if</span> yonghu==<span class="hljs-string">&#x27;山海&#x27;</span><span class="hljs-keyword">and</span> mima==<span class="hljs-string">&#x27;110&#x27;</span>:<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;身份验证成功&#x27;</span>)<br>      wenti=(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请回答你的博客名:&#x27;</span>))<br>      <span class="hljs-keyword">if</span> wenti==<span class="hljs-string">&#x27;山海&#x27;</span>:<br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎回家，主人&#x27;</span>)<br><br>      <span class="hljs-keyword">else</span>:<br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请立即停止你的盗号行为,我将立即退出程序&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;身份验证失败&#x27;</span>)<br></code></pre></td></tr></table></figure><p>需要说明的是和C&#x2F;C++、Java等语言不同，Python中没有用花括号来构造代码块而是<strong>使用了缩进的方式来表示代码的层次结构</strong>，如果<code>if</code>条件成立的情况下需要执行多条语句，只要保持多条语句具有相同的缩进就可以了。换句话说<strong>连续的代码如果又保持了相同的缩进那么它们属于同一个代码块</strong>，相当于是一个执行的整体。<strong>缩进</strong>可以使用任意数量的空格，但<strong>通常使用4个空格</strong>，建议大家<strong>不要使用制表键</strong>或者<strong>设置你的代码编辑工具自动将制表键变成4个空格</strong>。</p><h1 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h1><h2 id="练习1-1"><a href="#练习1-1" class="headerlink" title="练习1"></a>练习1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">英制单位英寸和公制单位厘米互换</span><br><span class="hljs-string">1英寸等于2.54cm</span><br><span class="hljs-string">2.54厘米等于1英寸</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>zhuan=<span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入长度&#x27;</span>))<br>huan=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入单位&#x27;</span>)<br><span class="hljs-keyword">if</span> huan==<span class="hljs-string">&#x27;in&#x27;</span> <span class="hljs-keyword">or</span> huan==<span class="hljs-string">&#x27;英寸&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%f英寸=%f厘米&#x27;</span>%(zhuan,zhuan*<span class="hljs-number">2.54</span>))<br><span class="hljs-keyword">elif</span> huan==<span class="hljs-string">&#x27;cm&#x27;</span> <span class="hljs-keyword">or</span> huan==<span class="hljs-string">&#x27;厘米&#x27;</span>: <span class="hljs-comment">#elif的意思是并列分支，入口有两个，符合那个条件就会执行那个</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%f厘米=%f英寸&#x27;</span>%(zhuan,zhuan/<span class="hljs-number">2.54</span>))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请输入有效单位&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="练习2：百分制成绩转换为等级制成绩。"><a href="#练习2：百分制成绩转换为等级制成绩。" class="headerlink" title="练习2：百分制成绩转换为等级制成绩。"></a>练习2：百分制成绩转换为等级制成绩。</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">练习2：百分制成绩转换为等级制成绩。</span><br><span class="hljs-string">要求：</span><br><span class="hljs-string">如果输入的成绩在90分以上（含90分）输出A；</span><br><span class="hljs-string">80分-90分（不含90分）输出B；</span><br><span class="hljs-string">70分-80分（不含80分）输出C；</span><br><span class="hljs-string">60分-70分（不含70分）输出D；</span><br><span class="hljs-string">60分以下输出E。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 思路一</span><br>chengji =<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入成绩&#x27;</span>))<br><span class="hljs-keyword">if</span> chengji &gt;=<span class="hljs-number">90</span>:<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对应的等级是A级&#x27;</span>)<br><span class="hljs-keyword">elif</span> chengji&gt;=<span class="hljs-number">80</span>:<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对应的等级是B级&#x27;</span>)<br><span class="hljs-keyword">elif</span> chengji&gt;=<span class="hljs-number">70</span>:<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对应的等级是C级&#x27;</span>)<br><span class="hljs-keyword">elif</span> chengji&gt;=<span class="hljs-number">60</span>:<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对应的等级是：D级&#x27;</span>)<br><span class="hljs-keyword">elif</span> chengji&lt;<span class="hljs-number">60</span>:<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对应的等级是：E级&#x27;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">百分制成绩转换为等级制成绩</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 思路二</span><br>score = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入成绩: &#x27;</span>))<br><span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">90</span>:<br>    grade = <span class="hljs-string">&#x27;A&#x27;</span><br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">80</span>:<br>    grade = <span class="hljs-string">&#x27;B&#x27;</span><br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">70</span>:<br>    grade = <span class="hljs-string">&#x27;C&#x27;</span><br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">60</span>:<br>    grade = <span class="hljs-string">&#x27;D&#x27;</span><br><span class="hljs-keyword">else</span>:<br>    grade = <span class="hljs-string">&#x27;E&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对应的等级是:&#x27;</span>, grade)<br></code></pre></td></tr></table></figure><h2 id="练习3-1"><a href="#练习3-1" class="headerlink" title="练习3"></a>练习3</h2><p>练习3：输入三条边长，如果能构成三角形就计算周长和面积</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">练习3：输入三条边长，如果能构成三角形就计算周长和面积。</span><br><span class="hljs-string">判断输入的边长能否构成三角形，如果能则计算出三角形的周长和面积</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a=<span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;第一条边：&#x27;</span>))<br>b=<span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;第一条边：&#x27;</span>))<br>c=<span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;第一条边：&#x27;</span>))<br><span class="hljs-keyword">if</span> a+b&gt;c <span class="hljs-keyword">and</span> a+c&gt;b <span class="hljs-keyword">and</span> c+b&gt;a:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;周长: %f&#x27;</span> % (a + b + c))<br>    p = (a + b + c) / <span class="hljs-number">2</span>  <span class="hljs-comment">#求出半周长</span><br>    mianji = (p * (p - a) * (p - b) * (p - c)) ** <span class="hljs-number">0.5</span>  <span class="hljs-comment">#**代表指数，</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;面积: %f&#x27;</span> % (mianji))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;不能构成三角形&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>说明：</strong> 上面使用的通过边长计算三角形面积的公式叫做<a href="https://baike.baidu.com/item/%E6%B5%B7%E4%BC%A6%E5%85%AC%E5%BC%8F/106956">海伦公式</a>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>三菱PLC-ST语言</title>
      <link href="/post/dc769c6c.html"/>
      <url>/post/dc769c6c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="markmap-container" style="height:300px">  <svg data="{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;三菱PLC ST语言&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;标签&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;全局标签&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;局部标签&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;分支主题2&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;分支主题3&quot;}]}"></svg></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>西门子SCL常用控制语句解析</title>
      <link href="/post/c67c93fa.html"/>
      <url>/post/c67c93fa.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p><strong>SCL作为一种编程语言，可以实现LAD&#x2F;FBD所有的功能，大多数的指令与LAD&#x2F;FBD都是相同的，只是在编辑器中的外形不同。只有一些指令使用是不太一样的甚至LAD&#x2F;FBD没有的，这里只介绍这些不同的</strong>。</p><p>SCL特殊的指令有以下几种，如图1-3红框中的指令:</p><h2 id="图1-读-x2F-写存储器"><a href="#图1-读-x2F-写存储器" class="headerlink" title="图1 读&#x2F;写存储器"></a>图1 读&#x2F;写存储器</h2><p><img src="https://s1.ax1x.com/2023/01/16/pS1P2Uf.png"></p><h2 id="图2-转换操作中的变量"><a href="#图2-转换操作中的变量" class="headerlink" title="图2 转换操作中的变量"></a>图2 转换操作中的变量</h2><p><img src="https://s1.ax1x.com/2023/01/16/pS1PTrn.png"></p><h2 id="图3-程序控制指令"><a href="#图3-程序控制指令" class="headerlink" title="图3 程序控制指令             "></a>图3 程序控制指令             <img src="https://s1.ax1x.com/2023/01/16/pS1Pv24.png"></h2><p>这里只介绍图3的程序控制指令。</p><h2 id="程序控制指令解释"><a href="#程序控制指令解释" class="headerlink" title="程序控制指令解释"></a>程序控制指令解释</h2><table><thead><tr><th align="center">类型</th><th align="left">程序控制语句</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">选择语句</td><td align="left">IF-THEN语句</td><td align="center">用于将程序执行转移到两个备选分支之一 (取决于条件为 True 还是False)判断两个量的真假</td></tr><tr><td align="center">选择语句</td><td align="left">CASE语句</td><td align="center">用于选择执行 n 个备选分支之一 (取决于变量值，变量值等于2，设定的备选分支等于2的话，就会执行2这个分支。)</td></tr><tr><td align="center">选择语句</td><td align="left">FOR语句</td><td align="center">只要控制变量在指定值范围内，就重复执行某一语句序列</td></tr><tr><td align="center">循环语句</td><td align="left">WHILE-DO语句</td><td align="center">只要仍满足执行条件，就重复执行当前一语句序列，</td></tr><tr><td align="center">循环语句</td><td align="left">REPEAT-UNTIL语句</td><td align="center">重复执行某一语句序列，直到满足终止条件为止</td></tr><tr><td align="center">循环语句</td><td align="left">CONTINUE语句</td><td align="center">停止执行当前循环迭代</td></tr><tr><td align="center">程序跳转</td><td align="left">EXIT语句</td><td align="center">无论是否满足终止条件，都会随时退出循环</td></tr><tr><td align="center">程序跳转</td><td align="left">GOTO语句</td><td align="center">使程序立即跳转到指定标签</td></tr><tr><td align="center">程序跳转</td><td align="left">RETURN语句</td><td align="center">使程序立刻退出正在执行的块，返回到调用块</td></tr></tbody></table><p>程序控制指令是SCL编程的基础，接近高级语言的指令，虽然这些功能通过LAD&#x2F;FBD也可以实现，但使用SCL编写会更加方便，逻辑条理也更加清晰。</p><h3 id="IF-条件执行"><a href="#IF-条件执行" class="headerlink" title="IF    条件执行"></a>IF    条件执行</h3><p> 说明：使用“条件执行”指令，可以根据条件控制程序流的分支。该条件是结果为布尔值 (True或 False)的表达式。可以将Bool变量、逻辑表达式或比较表达式作为条件。<br> 执行该条件执行指令时，将对指定的表达式进行运算。如果表达式的值为 True，则表示满足该条件;如果其值为 False，则表示不满足该条件根据分支的类型，可以对以下形式的指令进行编程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">IF...THEN... 分支:<br>IF <span class="hljs-string">&quot;条件&quot;</span> = <span class="hljs-number">1</span> THEN  <span class="hljs-comment">//输入条件，后面需要加上THEN，同时，注意格式，需要空格</span><br><span class="hljs-string">&quot;输出&quot;</span> := <span class="hljs-number">1</span>; <span class="hljs-comment">//注意空格，还有冒号以及分号的使用，必须在英文状态下输入。</span><br>END IF; <span class="hljs-comment">//结束语，也一定要加上。</span><br><span class="hljs-comment">//还有一种，我们可以在条件那再加上一个条件</span><br>IF <span class="hljs-string">&quot;条件&quot;</span> = <span class="hljs-number">1</span> THEN <span class="hljs-comment">//当条件等于1时，那么输出1就会动作，当条件不为1时，那么输出2就会动作。</span><br> <span class="hljs-string">&quot;输出1&quot;</span> := <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-comment">//相反</span><br> <span class="hljs-string">&quot;输出2&quot;</span> := <span class="hljs-number">1</span>;<br>END_IF;<br></code></pre></td></tr></table></figure><p><strong>在这里我建议，如果没有特别的要求，我们的变量表的名称可以化成英文或者是拼音的形式，这样我们在写起来的时候就可很大程度上避免来回切换中英文。</strong></p><h3 id="CASE：创建多路分支"><a href="#CASE：创建多路分支" class="headerlink" title="CASE：创建多路分支"></a>CASE：创建多路分支</h3><p>说明：使用”创建多路分支”指令，可以根据数字表达式的值执行多个指令序列中的一个。</p><p>按如下方式声明此指令：</p><p>CASE &lt;变量&gt; OF</p><p>&lt;常数1&gt;: &lt;语句1&gt;;</p><p>&lt;常数2&gt;: &lt;语句2&gt;;</p><p>……</p><p>&lt;常数n&gt;: &lt;语句n&gt;;</p><p>ELSE &lt;语句&gt;;</p><p>END_CASE;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">CASE <span class="hljs-string">&quot;状态值&quot;</span> OF   <span class="hljs-comment">//当状态值等于1时绿色就会TRUE，当等于2时，黄色就会TRUE。</span><br>                   <span class="hljs-comment">//当不等于1或2时红色就会TRUE,</span><br>    <span class="hljs-number">1</span>:  <span class="hljs-comment">// Statement section case 1</span><br>        <span class="hljs-string">&quot;绿色&quot;</span>:=<span class="hljs-number">1</span> ;<br>        <span class="hljs-string">&quot;黄色&quot;</span> := <span class="hljs-number">0</span>;<br>        <span class="hljs-string">&quot;红色&quot;</span> := <span class="hljs-number">0</span>;<br>    <span class="hljs-number">2</span>:  <span class="hljs-comment">// Statement section case 2 to 4</span><br>        <span class="hljs-string">&quot;黄色&quot;</span>:=<span class="hljs-number">1</span>  ;<br>        <span class="hljs-string">&quot;绿色&quot;</span> := <span class="hljs-number">0</span>;<br>        <span class="hljs-string">&quot;红色&quot;</span> := <span class="hljs-number">0</span>;<br>    ELSE  <span class="hljs-comment">// Statement section ELSE</span><br>        <span class="hljs-string">&quot;黄色&quot;</span> := <span class="hljs-number">0</span>;<br>        <span class="hljs-string">&quot;绿色&quot;</span> := <span class="hljs-number">0</span>;<br>        <span class="hljs-string">&quot;红色&quot;</span> := <span class="hljs-number">1</span>; ;<br>END_CASE;<br><span class="hljs-comment">//当表达式的值等于某个常数值时，将执行该常数后的各种指令。</span><br><span class="hljs-comment">//如果不满足条件，则执行 ELSE 后编写的指令。如果两个值不相等，则执行这些指令。</span><br></code></pre></td></tr></table></figure><h3 id="FOR：在计数循环中执行"><a href="#FOR：在计数循环中执行" class="headerlink" title="FOR：在计数循环中执行"></a>FOR：在计数循环中执行</h3><p>说明：使用”在计数循环中执行”指令，重复执行程序循环，直至运行变量不在指定的取值范围内。</p><p>也可以嵌套程序循环。在程序循环内，可以编写包含其它运行变量的其它程序循环。</p><p>通过指令”复查循环条件”(Continue)，可以终止当前正在运行的程序循环。通过指令”立即退出循环”(Exit)终止整个循环的执行。</p><p><img src="https://s1.ax1x.com/2023/02/03/pSs5QZd.png"></p><p><img src="https://s1.ax1x.com/2023/02/03/pSs58it.png"></p><p><strong>用FOR计算数组里面所有数据的和</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//计算数组里面所有数据的和</span><br><span class="hljs-string">&quot;和&quot;</span> := <span class="hljs-number">0</span>;<br>FOR <span class="hljs-string">&quot;计数&quot;</span> := <span class="hljs-number">0</span> TO <span class="hljs-number">20</span> DO<br>    <span class="hljs-string">&quot;和&quot;</span> := <span class="hljs-string">&quot;和&quot;</span> + <span class="hljs-string">&quot;数据块_1&quot;</span>.数组<span class="hljs-number">1</span>[<span class="hljs-string">&quot;计数&quot;</span>]; <br>    <span class="hljs-comment">// Statement section FOR</span><br> ;<br>END_FOR;<br></code></pre></td></tr></table></figure><p><strong>用FOR计算数组里面所有数据的最大值</strong></p><p>通过建立0-20的数组，使用FOR语句循环，在0到20 的数组中，用IF语句判断数组2中的最大值，最终在循环到第20的数组中时，IF判断出最大的值，循环停止，求最大值输出最后的结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//计算数组数据中最大的值</span><br>FOR <span class="hljs-string">&quot;最大值&quot;</span> := <span class="hljs-number">0</span> TO <span class="hljs-number">20</span> DO <span class="hljs-comment">//最大值数据类型为：Int    地址：%MW16，</span><br><br>    <span class="hljs-comment">// Statement section FOR</span><br>    IF <span class="hljs-string">&quot;求最大值&quot;</span> &lt; <span class="hljs-string">&quot;数据块_1&quot;</span>.数组<span class="hljs-number">2</span>[<span class="hljs-string">&quot;最大值&quot;</span>] THEN  <span class="hljs-comment">//求最大值数据类型为:int,%MW18</span><br>        <span class="hljs-comment">// Statement section IF</span><br>        <span class="hljs-string">&quot;求最大值&quot;</span> := <span class="hljs-string">&quot;数据块_1&quot;</span>.数组<span class="hljs-number">2</span>[<span class="hljs-string">&quot;最大值&quot;</span>]; <span class="hljs-comment">//数据类型：Array[0..20] of Int，</span><br>      END_IF;   <br><br>END_FOR;<br></code></pre></td></tr></table></figure><h3 id="WHILE语句"><a href="#WHILE语句" class="headerlink" title="WHILE语句"></a>WHILE语句</h3><p>在满足条件时，要执行的语句。如果不满足条件，则程序将从 END_WHILE 后继续执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">WHILE <span class="hljs-string">&quot;参数1&quot;</span> &lt;= <span class="hljs-number">100</span> AND <span class="hljs-string">&quot;标志位&quot;</span> = <span class="hljs-number">0</span> DO <span class="hljs-comment">//当参数1小于100时，并且标志位等于0</span><br>                                          <span class="hljs-comment">//WHILE语句开始循环</span><br>    <span class="hljs-comment">// Statement section WHILE</span><br>    <span class="hljs-string">&quot;参数2&quot;</span> := <span class="hljs-string">&quot;参数1&quot;</span> + <span class="hljs-string">&quot;参数2&quot;</span>;     <span class="hljs-comment">//参数2=参数1+参数2，:=表示传送，将后面的结果传入。</span><br>    <span class="hljs-string">&quot;参数1&quot;</span>:= <span class="hljs-string">&quot;参数1&quot;</span> + <span class="hljs-number">1</span>;             <span class="hljs-comment">//参数1=参数1+1，</span><br><br>    EXIT; <span class="hljs-comment">//表示立即退出循环，如果没有EXIT，那么就会一直在循环中，无法跳出。                           </span><br>END_WHILE;<br>IF <span class="hljs-string">&quot;参数1&quot;</span> &gt;= <span class="hljs-number">101</span> THEN <span class="hljs-comment">//当参数1大于等于101时，结束循环，</span><br>    <span class="hljs-comment">// Statement section IF</span><br>    <span class="hljs-string">&quot;标志位&quot;</span> := <span class="hljs-number">1</span>;<br>END_IF;<br></code></pre></td></tr></table></figure><h3 id="REPEAT语句"><a href="#REPEAT语句" class="headerlink" title="REPEAT语句"></a>REPEAT语句</h3><p>REPEAT语句先执行循环体，再判断条件是否成立，</p><p><img src="https://s1.ax1x.com/2023/02/04/pSyJJ4P.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">#<span class="hljs-string">&quot;3&quot;</span> := <span class="hljs-number">0</span>;<br>REPEAT<br>    #<span class="hljs-string">&quot;3&quot;</span> := #<span class="hljs-string">&quot;3&quot;</span>+<span class="hljs-number">2</span>;<br>UNTIL #<span class="hljs-string">&quot;3&quot;</span>&gt;<span class="hljs-number">100</span> END_REPEAT;<span class="hljs-comment">//当执行循环体后，判断条件时候成立若不成立，继续循环，</span><br>                       <span class="hljs-comment">//当条件true时，结束循环。</span><br>#<span class="hljs-string">&quot;3&quot;</span> := #<span class="hljs-string">&quot;4&quot;</span>;    <br></code></pre></td></tr></table></figure><ol><li><p>FOR语句循环实现有限次循环</p></li><li><p>WHLIE语句的条件为真时执行循环体</p></li><li><p>REPEAT语句的条件为否时执行循环体</p><h3 id="GOTO：跳转"><a href="#GOTO：跳转" class="headerlink" title="GOTO：跳转"></a>GOTO：跳转</h3><p>说明：使用”跳转”指令，可以从标注为跳转标签的指定点开始继续执行程序。</p><p>跳转标签和”跳转”指令必须在同一个块中。在一个块中，跳转标签的名称只能指定一次。每个跳转标签可以是多个跳转指令的目标。不允许从”外部”跳转到程序循环内，但允许从循环内跳转到”外部”。</p><p>注意：<u>LAD&#x2F;FBD语言内的SCL段，不能使用GOTO指令。</u></p><p>跳转标签遵循以下语法规则：</p><ul><li>字母（a 至 z，A 至 Z）</li><li>字母和数字组合；请必须字母为开始</li></ul><p>可按如下方式声明此指令：</p><p>GOTO &lt;跳转标签&gt;;</p><p>…</p><p>&lt;跳转标签&gt;: &lt;语句&gt;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">CASE <span class="hljs-string">&quot;状态值&quot;</span> OF  <span class="hljs-comment">//当状态值为1.2.3中的某个数时，</span><br>                 <span class="hljs-comment">//相应跳转至MyLABEL1，MyLABEL2，MyLABEL3，相反则跳转至MyLABEL4。</span><br>    <span class="hljs-number">1</span>:<br>        GOTO MyLABEL1 ;  <span class="hljs-comment">// Statement section case 1</span><br><br>    <span class="hljs-number">2</span>:<br>        GOTO MyLABEL2<span class="hljs-comment">// Statement section case 2 to 4</span><br>        ;<br>    <span class="hljs-number">3</span>:<br>        GOTO MyLABEL3;<br>    ELSE  <span class="hljs-comment">// Statement section ELSE</span><br>        GOTO MyLABEL4; ;<br>END_CASE;<br>MyLABEL1:<br><span class="hljs-string">&quot;参数1&quot;</span> += <span class="hljs-number">1</span>;<br>MyLABEL2:<br><span class="hljs-string">&quot;参数2&quot;</span> += <span class="hljs-number">2</span>;<br>MyLABEL3:<br><span class="hljs-string">&quot;参数3&quot;</span> += <span class="hljs-number">3</span>;<br>MyLABEL4:<br><span class="hljs-string">&quot;参数4&quot;</span> += <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="RETURN：退出块"><a href="#RETURN：退出块" class="headerlink" title="RETURN：退出块"></a>RETURN：退出块</h3><p>说明：使用”退出块”指令，可以终止当前处理块中的程序执行，并在调用块中继续执行。</p><p>如果该指令出现在块结尾处，则可以跳过。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><br>IF <span class="hljs-string">&quot;参数3&quot;</span>&gt;=<span class="hljs-number">5000</span> THEN<br> <span class="hljs-comment">// Statement section IF</span><br> RETURN ;<br>END_IF;<br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>以上就是西门子SCL语句的程序控制指令，需要灵活多变使用，重点注意语法格式。还有程序扫描逻辑</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>西门子SCL语句（二）</title>
      <link href="/post/65434e6a.html"/>
      <url>/post/65434e6a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="CASE-OF语句练习"><a href="#CASE-OF语句练习" class="headerlink" title="CASE OF语句练习"></a>CASE OF语句练习</h1><p><code>CASE       OF语句，</code>用于选择执行 n 个备选分支之一 (取决于变量值)</p><p>我们提前建好变量，建立一个存储区，<code>%MW10</code>命名为状态值，数据类型为int</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-type">CASE</span> <span class="hljs-string">&quot;状态值&quot;</span> <span class="hljs-type">OF</span><br>    <span class="hljs-number">1</span>:  <span class="hljs-comment">// Statement section case 1</span><br>        <span class="hljs-string">&quot;绿色&quot;</span>:=<span class="hljs-number">1</span> ;<br>        <span class="hljs-string">&quot;黄色&quot;</span> := <span class="hljs-number">0</span>;<br>        <span class="hljs-string">&quot;红色&quot;</span> := <span class="hljs-number">0</span>;<br>    <span class="hljs-number">2</span>:  <span class="hljs-comment">// Statement section case 2 to 4</span><br>        <span class="hljs-string">&quot;黄色&quot;</span>:=<span class="hljs-number">1</span>  ;<br>        <span class="hljs-string">&quot;绿色&quot;</span> := <span class="hljs-number">0</span>;<br>        <span class="hljs-string">&quot;红色&quot;</span> := <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ELSE</span>  <span class="hljs-comment">// Statement section ELSE</span><br>        <span class="hljs-string">&quot;黄色&quot;</span> := <span class="hljs-number">0</span>;<br>        <span class="hljs-string">&quot;绿色&quot;</span> := <span class="hljs-number">0</span>;<br>        <span class="hljs-string">&quot;红色&quot;</span> := <span class="hljs-number">1</span>; ;<br><span class="hljs-type">END_CASE</span>;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>西门子SCL语言配置</title>
      <link href="/post/16503b92.html"/>
      <url>/post/16503b92.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="西门子SCL语句"><a href="#西门子SCL语句" class="headerlink" title="西门子SCL语句"></a>西门子SCL语句</h1><h2 id="打开博图，添加新设备，这里我们以西门子1500PLC为例，"><a href="#打开博图，添加新设备，这里我们以西门子1500PLC为例，" class="headerlink" title="打开博图，添加新设备，这里我们以西门子1500PLC为例，"></a>打开博图，添加新设备，这里我们以西门子1500PLC为例，</h2><img title="" src="https://s1.ax1x.com/2023/01/16/pSly974.png" alt="" width="623"><h2 id="创建好我们需要plc的型号后，进入组态，点击设备组态，"><a href="#创建好我们需要plc的型号后，进入组态，点击设备组态，" class="headerlink" title="创建好我们需要plc的型号后，进入组态，点击设备组态，"></a>创建好我们需要plc的型号后，进入组态，点击设备组态，</h2><p><img src="https://s1.ax1x.com/2023/01/16/pSlyFhR.png" alt="去"></p><h2 id="双击PLC-I-x2F-O面板个其中一个，进入配置页面，将起始地址改为126，结束地址改为135，这里就是模拟量的地址改变。"><a href="#双击PLC-I-x2F-O面板个其中一个，进入配置页面，将起始地址改为126，结束地址改为135，这里就是模拟量的地址改变。" class="headerlink" title="双击PLC I&#x2F;O面板个其中一个，进入配置页面，将起始地址改为126，结束地址改为135，这里就是模拟量的地址改变。"></a>双击PLC I&#x2F;O面板个其中一个，进入配置页面，将起始地址改为126，结束地址改为135，这里就是模拟量的地址改变。</h2><p><img src="https://s1.ax1x.com/2023/01/16/pSly39I.png"></p><h2 id="再双击点开另一个面板，将这里的起始地址改为0，结束地址为1，这里更改就是为了将plc的实际输出地址改为0起，这样方便我们对应PLC的实际地址。"><a href="#再双击点开另一个面板，将这里的起始地址改为0，结束地址为1，这里更改就是为了将plc的实际输出地址改为0起，这样方便我们对应PLC的实际地址。" class="headerlink" title="再双击点开另一个面板，将这里的起始地址改为0，结束地址为1，这里更改就是为了将plc的实际输出地址改为0起，这样方便我们对应PLC的实际地址。"></a>再双击点开另一个面板，将这里的起始地址改为0，结束地址为1，这里更改就是为了将plc的实际输出地址改为0起，这样方便我们对应PLC的实际地址。</h2><p><img src="https://s1.ax1x.com/2023/01/16/pSlysg0.png"></p><p><strong>简单的组态后，就可以开始我们的SCL语句的学习，SCL语句，在处理运算时有着很好的能力，可以很方便的让我们进行运算。</strong></p><h2 id="创建PLC变量表"><a href="#创建PLC变量表" class="headerlink" title="创建PLC变量表"></a>创建PLC变量表</h2><p>在我们写plc程序的过程中，我们需要养成一个好习惯，如果变量很多，需要用到的IO点很多那我们就必须要提前在plc变量表中建立好变量，这样我们在调用时就不会出现忘记或者变量不清晰的问题。变量表也能帮助我们理清思路。所以提前创建好plc变量表还是很有必要的。</p><p><img src="https://s1.ax1x.com/2023/01/16/pSly5CR.png"></p><h2 id="创建SCL语句块"><a href="#创建SCL语句块" class="headerlink" title="创建SCL语句块"></a>创建SCL语句块</h2><p>然后我们就可以点开<code>Main主程序</code>，我们也可以添加新的一个<code>FC块</code>，或者<code>FB块</code>都可以，当然了也可以选择不单另创建，我们也可以在主程序中创建。</p><p><img src="https://s1.ax1x.com/2023/01/16/pS1StfJ.png"></p><p><strong>右击程序段，在弹出的页面下方选择插入SCL程序段。这样直接就会生成一个程序块。</strong></p><p><img src="https://s1.ax1x.com/2023/01/16/pS1SHhQ.png">    </p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>三菱plc总结（一）</title>
      <link href="/post/a659eac3.html"/>
      <url>/post/a659eac3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>   不知不觉间，职业道路的求学生涯已经要六年了，这六年来学到了很多，也长大了很多，接触到了电工，机械，自动化，单片机，plc等学科，也是在自己的努力下进入了技能大赛，接触并学习到很多曾经接触不到的知识。同时接触很多人，开阔了自己的眼界，从刚开始的兴趣转变为真正的热爱，并且为之努力，加深技能的磨炼，让自己沉浸其中，让自己每天都过的充实。</p><p>我觉得在职业道路中，只有一直对自己的专业保持热爱，才可以无限成长，并且发展成为自己的一部分，转化为自身的实力。</p></blockquote><p><img src="https://s1.ax1x.com/2023/01/14/pSM6IZ4.jpg"></p><hr><h1 id="PLC"><a href="#PLC" class="headerlink" title="PLC"></a>PLC</h1><h2 id="三菱FX-系列plc"><a href="#三菱FX-系列plc" class="headerlink" title="三菱FX-系列plc"></a>三菱FX-系列plc</h2><p>____这是我第一次接触的plc，也是非常好入门的一个，在我的老师带领下，我们很快就掌握了它的基础使用，虽然很基础。刚开始用的是三菱的手持编程器(<del>虽然已经忘记了很多</del>😂)，因为在之后训练大赛的过程中使用电脑进行的，所以在手持编程器上，也就没有再进行下去，但是在做过很多套题之后，我的水平也是日益增长，直到今日我也没有放弃自己对它的探索。 </p><p>____有很多人可能把plc想的很难，因为需要编程，但其实，在现实中，这个可编程控制器plc是一点也不难学的，只要肯学，肯动脑筋，就一定可以学会。</p><h2 id="plc基础的认识"><a href="#plc基础的认识" class="headerlink" title="plc基础的认识"></a>plc基础的认识</h2><ol><li><p>plc全称是“可编程控制器”英文名（Programmable Logic Controller）简称PC或PLC是一种数字运算操作的电子系统，是专门在工业环境下应用而设计。</p></li><li><p>它采用可以编制程序的<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%99%A8/1583185?fromModule=lemma_inlink">存储器</a>，用来在执行存储<code>逻辑运算</code>和<code>顺序控制</code>、<code>定时</code>、<code>计数</code>和<code>算术运算</code>等操作的指令，并通过<code>数字</code>或<code>模拟</code>的<code>输入(I)</code>和<code>输出(O)</code><a href="https://baike.baidu.com/item/%E6%8E%A5%E5%8F%A3/2886384?fromModule=lemma_inlink">接口</a>，控制各种类型的机械设备或生产过程。可编程控制器是在电器控制技术和<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/1127562?fromModule=lemma_inlink">计算机技术</a>的基础上开发出来的，并逐渐发展成为以微处理器为核心，把自动化技术、计算机技术、通讯技术融为一体的新型工业控制装置。</p></li><li><p>PLC已被广泛应用于各种生产机械和生产过程的自动控制中，成为一种最重要、最普及、应用场合最多的工业控制装置，被公认为现代工业自动化的三大支柱（PLC、机器人、CAD&#x2F;CAM）之一”</p><p>想要更全面的了解plc 的工作原理可自行搜索，这里我们就不讲了。</p></li></ol><h2 id="plc软件的介绍与安装教程"><a href="#plc软件的介绍与安装教程" class="headerlink" title="plc软件的介绍与安装教程"></a>plc软件的介绍与安装教程</h2><ol><li><p>在三菱plc中它所有的编程软件主要有三款，GX Developer，GX Works2和GX Works3</p></li><li><p><code>GX Developer</code>是老版软件了不带仿真，如果需要仿真，还要安装仿真软件GXSimulator，GX Simulator6-C不支持三菱fx 3u仿真，但它是中文版，GX Simulator7则支持fx 3u，但它是英文版的。</p></li><li><p>GX Developer安装步骤</p><p>GX Developer安装需要先安装环境文件，EnvMEL里的STEP.exe，安装好后再安装外部文件的STEP.exe</p><p>GX Developer安装好后，</p><p>安装GX Simulator，</p><p>同样是点击STEP.exe安装</p><p>GX Works2则是新版软件，自带仿真，安装完即可以使用。</p><p><a href="https://zhuanlan.zhihu.com/p/541276015">GX Works2安装教程</a> &lt;点击即可看到</p><p><a href="https://www.bilibili.com/video/BV1Hv411M7Pr/?from=search&seid=16748953512924650955&spm_id_from=333.337.0.0&vd_source=d18725c1557a88019cba6b3099c041da">GX works3安装教程</a> &lt;点击即可看到</p><p>GX Works3是最新版的三菱编程软件，但此款软件用的比较少，主要是为了fx 5u系列和R系列。</p></li><li><p>安装软件时需要填写序列号：570-986818410  </p><pre><code>                                                 804-999559933                                                   998-598638072                                                   952—500209687</code></pre><p>一般来说如果有现成的三菱plc学，有三菱Developer这个软件就可以了，如果没有三菱plc实体的话，那么GX work2，GX work3，就可以用，当然了现在也有模拟仿真软件可以用，就像Factory IO这个软件，也是支持三菱plc的连接，只是在连接的过程中稍微要比西门子博图软件要更繁琐。</p><p><img src="https://s1.ax1x.com/2023/01/14/pSMWHvq.png"></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>欢迎大家留下宝贵意见</title>
      <link href="/post/29c39da7.html"/>
      <url>/post/29c39da7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="欢迎大家留下宝贵意见"><a href="#欢迎大家留下宝贵意见" class="headerlink" title="欢迎大家留下宝贵意见"></a>欢迎大家留下宝贵意见</h1><p><img src="https://pic4.zhimg.com/80/v2-4d7611670a65be4e03fc86798d082833_720w.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python笔记</title>
      <link href="/post/c00b24b1.html"/>
      <url>/post/c00b24b1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="语言元素"><a href="#语言元素" class="headerlink" title="语言元素"></a>语言元素</h1><h4 id="指令和程序"><a href="#指令和程序" class="headerlink" title="指令和程序"></a>指令和程序</h4><p>计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于<a href="https://zh.wikipedia.org/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84">“冯·诺依曼结构”</a>的计算机。“冯·诺依曼结构”有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制（因为在数数时十根手指用完之后就只能进位了，当然凡事都有例外，玛雅人可能是因为长年光着脚的原因把脚趾头也算上了，于是他们使用了二十进制的计数法，在这种计数法的指导下玛雅人的历法就与我们平常使用的历法不一样，而按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“这种荒诞的说法，今天我们可以大胆的猜测，玛雅文明之所以发展缓慢估计也与使用了二十进制有关）。对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示1，低电压表示0），于是在“冯·诺依曼结构”的计算机都使用了二进制。虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，但是了解二进制以及它与我们生活中的十进制之间的转换关系，以及二进制与八进制和十六进制的转换关系还是有必要的。如果你对这一点不熟悉，可以自行使用<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6">维基百科</a>或者<a href="https://baike.baidu.com/">百度百科</a>科普一下。</p><h3 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h3><p>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。</p><ul><li>整型：Python中可以处理任意大小的整数（Python 2.x中有<code>int</code>和<code>long</code>两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</li><li>浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</li><li>字符串型：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</li><li>布尔型：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如<code>3 &lt; 5</code>会产生布尔值<code>True</code>，而<code>2 == 1</code>会产生布尔值<code>False</code>）。</li><li>复数型：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的<code>i</code>换成了<code>j</code>。实际上，这个类型并不常用，大家了解一下就可以了。</li></ul><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p><ul><li>硬性规则：<ul><li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li><li>大小写敏感（大写的<code>a</code>和小写的<code>A</code>是两个不同的变量）。</li><li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li></ul></li><li>PEP 8要求：<ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头</li><li>私有的实例属性用两个下划线开头</li></ul></li></ul><h4 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h4><p>下面通过几个例子来说明变量的类型和变量使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用变量保存数据并进行加减乘除运算</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-number">321</span><br>b = <span class="hljs-number">12</span><br><span class="hljs-built_in">print</span>(a + b)    <span class="hljs-comment"># 333</span><br><span class="hljs-built_in">print</span>(a - b)    <span class="hljs-comment"># 309</span><br><span class="hljs-built_in">print</span>(a * b)    <span class="hljs-comment"># 3852</span><br><span class="hljs-built_in">print</span>(a / b)    <span class="hljs-comment"># 26.75</span><br></code></pre></td></tr></table></figure><p>在Python中可以使用<code>type</code>函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用type()检查变量的类型</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-number">100</span><br>b = <span class="hljs-number">12.345</span><br>c = <span class="hljs-number">1</span> + <span class="hljs-number">5j</span><br>d = <span class="hljs-string">&#x27;hello, world&#x27;</span><br>e = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))    <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b))    <span class="hljs-comment"># &lt;class &#x27;float&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(c))    <span class="hljs-comment"># &lt;class &#x27;complex&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(d))    <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(e))    <span class="hljs-comment"># &lt;class &#x27;bool&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>可以使用Python中内置的函数对变量类型进行转换。</p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li><li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li><li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）</li></ul><p>下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用input()函数获取键盘输入(字符串)</span><br><span class="hljs-string">使用int()函数将输入的字符串转换成整数</span><br><span class="hljs-string">使用print()函数输出带占位符的字符串</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;a = &#x27;</span>))<br>b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;b = &#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d + %d = %d&#x27;</span> % (a, b, a + b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d - %d = %d&#x27;</span> % (a, b, a - b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d / %d = %f&#x27;</span> % (a, b, a / b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d // %d = %d&#x27;</span> % (a, b, a // b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d %% %d = %d&#x27;</span> % (a, b, a % b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d ** %d = %d&#x27;</span> % (a, b, a ** b))<br></code></pre></td></tr></table></figure><p><strong>说明</strong>：上面的print函数中输出的字符串使用了占位符语法，其中<code>%d</code>是整数的占位符，<code>%f</code>是小数的占位符，<code>%%</code>表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成<code>%%</code>），字符串之后的<code>%</code>后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。 </p><table><thead><tr><th>运算符</th><th>描述</th><th></th></tr></thead><tbody><tr><td>[] [:]</td><td>下标，切片</td><td></td></tr><tr><td>**</td><td>指数</td><td></td></tr><tr><td>~ + -</td><td>按位取反, 正负号</td><td></td></tr><tr><td>* &#x2F; % &#x2F;&#x2F;</td><td>乘，除，模，整除</td><td></td></tr><tr><td>+ -</td><td>加，减</td><td></td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移</td><td></td></tr><tr><td>&amp;</td><td>按位与</td><td></td></tr><tr><td>^ &#96;\</td><td>&#96;</td><td>按位异或，按位或</td></tr><tr><td>&lt;&#x3D; &lt; &gt; &gt;&#x3D;</td><td>小于等于，小于，大于，大于等于</td><td></td></tr><tr><td>&#x3D;&#x3D; !&#x3D;</td><td>&#x3D;&#x3D; !&#x3D;</td><td></td></tr><tr><td>is is not</td><td>身份运算符</td><td></td></tr><tr><td>in not in</td><td>成员运算符</td><td></td></tr><tr><td>not or and</td><td>逻辑运算符</td><td></td></tr><tr><td>&#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D; &#x2F;&#x2F;&#x3D; **&#x3D; &amp;&#x3D; &#96;</td><td>&#x3D;&#96;^&#x3D; &gt;&gt;&#x3D; &lt;&lt;&#x3D;</td><td>复合）赋值运算符</td></tr></tbody></table><p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p><h1 id="打印字符"><a href="#打印字符" class="headerlink" title="打印字符"></a>打印字符</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;nihao&#x27;</span>) <br>运算使用 <span class="hljs-built_in">print</span>(<span class="hljs-number">198776543</span> + <span class="hljs-number">2999999</span>)将数据输出到文件中 注意！<br><br><span class="hljs-number">1.</span>所指定的盘符必须存在， <br><br><span class="hljs-number">2.</span>使用file= fpfp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;D:/text.txt&#x27;</span>, <span class="hljs-string">&#x27;a+&#x27;</span>)如果文件不存在，就创建，如果有，就在文件里面继续追加 <br><br><span class="hljs-number">3.</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;nihao&#x27;</span>, file=fp)fp表示输入到上面一行的地址中 没有file，打印的内容就无法在新建的文本中显<br>close()关闭 <br></code></pre></td></tr></table></figure><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello\nnihao&#x27;</span>)<span class="hljs-comment">#\  +转义字符的首字母   n--&gt;newline的首字母表示换行  </span><br><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello\tnihao&#x27;</span>)<span class="hljs-comment">#\  +转义字符的首字母   t--&gt;的首字母表示空出4个字符位 </span><br><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello\rnihao&#x27;</span>)<span class="hljs-comment">#\  +转义字符的首字母   r--&gt;的首字母表示执行将前一个字符覆盖的字符 </span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello\bnihao&#x27;</span>)<span class="hljs-comment">#\  +转义字符的首字母   b--&gt;的首字母表示退一格 </span><br><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;http:\\\\www.baidu.com&#x27;</span>) <br></code></pre></td></tr></table></figure><hr><h1 id="python中的保留字和标识符"><a href="#python中的保留字和标识符" class="headerlink" title="python中的保留字和标识符"></a>python中的保留字和标识符</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">import</span> keyword <br><br> <span class="hljs-built_in">print</span>( keyword.kwlist)<span class="hljs-comment">#[&#x27;False&#x27;, &#x27;None&#x27;, </span><br><span class="hljs-string">&#x27;True&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;as&#x27;</span>, <span class="hljs-string">&#x27;assert&#x27;</span>, <span class="hljs-string">&#x27;break&#x27;</span>,<span class="hljs-comment"># &#x27;class&#x27;, &#x27;continue&#x27;, &#x27;def&#x27;, &#x27;del&#x27;, &#x27;elif&#x27;,</span><br> <span class="hljs-string">&#x27;else&#x27;</span>, <span class="hljs-string">&#x27;except&#x27;</span>, <span class="hljs-string">&#x27;finally&#x27;</span>, <span class="hljs-string">&#x27;for&#x27;</span>,<span class="hljs-comment">#&#x27;from&#x27;, &#x27;global&#x27;, &#x27;if&#x27;, &#x27;import&#x27;, &#x27;in&#x27;, &#x27;is&#x27;, </span><br> <span class="hljs-string">&#x27;lambda&#x27;</span>, <span class="hljs-string">&#x27;nonlocal&#x27;</span>, <span class="hljs-string">&#x27;not&#x27;</span>, <span class="hljs-string">&#x27;or&#x27;</span>,<span class="hljs-comment">#&#x27;pass&#x27;, </span><br> <span class="hljs-string">&#x27;raise&#x27;</span>, <span class="hljs-string">&#x27;return&#x27;</span>, <span class="hljs-string">&#x27;try&#x27;</span>, <span class="hljs-string">&#x27;while&#x27;</span>, <span class="hljs-string">&#x27;with&#x27;</span>, <br> <span class="hljs-string">&#x27;yield&#x27;</span>]保留字在程序中不可用 <br></code></pre></td></tr></table></figure><hr><h1 id="二进制与字符编码"><a href="#二进制与字符编码" class="headerlink" title="二进制与字符编码"></a>二进制与字符编码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">0b100111001011000</span>)) <br><br> <span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;乘&#x27;</span>)) <br></code></pre></td></tr></table></figure><hr><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">name=<span class="hljs-string">&#x27;天空北慕&#x27;</span> <br><br><span class="hljs-built_in">print</span>(name) <br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;标识&#x27;</span>,<span class="hljs-built_in">id</span>(name)) <br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;类型&#x27;</span>,<span class="hljs-built_in">type</span>(name)) <br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;值&#x27;</span>,name) <br></code></pre></td></tr></table></figure><hr><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 天空北慕·</span><br><span class="hljs-comment"># 开发时间：2022/11/20 21:45</span><br><span class="hljs-comment">#整数</span><br>n1=<span class="hljs-number">90</span><br>n2=-<span class="hljs-number">77</span><br>n3=<span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(n1,<span class="hljs-built_in">type</span>(n1))<br><span class="hljs-built_in">print</span>(n2,<span class="hljs-built_in">type</span>(n2))<br><span class="hljs-built_in">print</span>(n3,<span class="hljs-built_in">type</span>(n3))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;十进制&#x27;</span>,<span class="hljs-number">118</span>)<br><br><span class="hljs-comment">#  浮点数</span><br>a=<span class="hljs-number">3.1415926</span><br><span class="hljs-built_in">print</span>(a,<span class="hljs-built_in">type</span>(a))<br>n5=<span class="hljs-number">1.1</span><br>n22=<span class="hljs-number">2.2</span><br><span class="hljs-built_in">print</span>(n5+n22)<br><span class="hljs-keyword">from</span> decimal <span class="hljs-keyword">import</span>  Decimal<br><span class="hljs-built_in">print</span>(Decimal(<span class="hljs-string">&#x27;1.1&#x27;</span>)+Decimal(<span class="hljs-string">&#x27;2.2&#x27;</span>))<br><span class="hljs-comment">#布尔数据类型</span><br><span class="hljs-comment">#用来表示真或者假的值，布尔值在python中可以转成整数</span><br>f1=<span class="hljs-literal">True</span><br>f2=<span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(f1,<span class="hljs-built_in">type</span>(f1))<br><span class="hljs-built_in">print</span>(f2,<span class="hljs-built_in">type</span>(f2))<br><span class="hljs-comment">#布尔值可以转成整数计算</span><br><span class="hljs-built_in">print</span>(f1+<span class="hljs-number">1</span>)  <span class="hljs-comment">#1+1=2</span><br><span class="hljs-built_in">print</span>((f2+<span class="hljs-number">1</span>))  <span class="hljs-comment">#0+1=1</span><br><span class="hljs-comment">#字符串类型</span><br><span class="hljs-comment">#字符串又被称为不可变的字符序列</span><br><span class="hljs-comment">#可以使用单&#x27;双&#x27;&#x27;引号&quot;&quot;三引号&#x27;&#x27;&#x27; &#x27;&#x27;&#x27;来定义</span><br><span class="hljs-comment">#单引号和双引号的定义字符串必须在一行</span><br><span class="hljs-comment">#三引号的字符串可以分布在连续的多行</span><br>q1=<span class="hljs-string">&#x27;认识你很幸运&#x27;</span><br>q2=<span class="hljs-string">&quot;认识你很幸运&quot;</span><br>q3=<span class="hljs-string">&quot;&quot;&quot;认识你很幸运&quot;&quot;&quot;</span><br>q4=<span class="hljs-string">&quot;&quot;&quot;认识你很幸运</span><br><span class="hljs-string">见到你也是&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(q1)<br><span class="hljs-built_in">print</span>(q2)<br><span class="hljs-built_in">print</span>(q3)<br><span class="hljs-built_in">print</span>(q4)<br><span class="hljs-built_in">print</span>(q1)<br><span class="hljs-built_in">print</span>(q2)<br><span class="hljs-built_in">print</span>(q3)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(q1),<span class="hljs-built_in">type</span>(q2),<span class="hljs-built_in">type</span>(q3),<span class="hljs-built_in">type</span>(q4))<br><span class="hljs-comment">#数据类型转换</span><br>wo=<span class="hljs-string">&#x27;张三&#x27;</span><br>nianling=<span class="hljs-number">30</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(wo),<span class="hljs-built_in">type</span>(nianling))<span class="hljs-comment">#数据类型不同，</span><br><span class="hljs-comment">#print(&#x27;我叫&#x27;+wo+&#x27;今年，&#x27;+strnianling+&#x27;岁了&#x27;)#此时是报错的</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我叫&#x27;</span>+wo+<span class="hljs-string">&#x27;今年，&#x27;</span>+<span class="hljs-built_in">str</span>(nianling)+<span class="hljs-string">&#x27;岁了&#x27;</span>)<span class="hljs-comment">#解决方案，将int类型通过str()函数int类型转换成为ser类型的</span><br>w1=<span class="hljs-number">10</span><br>w2=<span class="hljs-number">10.2</span><br>w3=<span class="hljs-literal">False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(w1),<span class="hljs-built_in">type</span>(w2),<span class="hljs-built_in">type</span>(w3))<span class="hljs-comment">#&lt;class &#x27;int&#x27;&gt; &lt;class &#x27;float&#x27;&gt; &lt;class &#x27;bool&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(w1),<span class="hljs-built_in">str</span>(w2),<span class="hljs-built_in">str</span>(w3),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(w1)),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(w2)),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(w3)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w1&#x27;</span>,<span class="hljs-string">&#x27;w2&#x27;</span>,<span class="hljs-string">&#x27;w3&#x27;</span>,<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(w1)),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(w2)),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(w3)))<span class="hljs-comment">#可以用引号转，</span><br><span class="hljs-comment">#10 10.2 False &lt;class &#x27;str&#x27;&gt; &lt;class &#x27;str&#x27;&gt; &lt;class &#x27;str&#x27;&gt;这个时候str函数就将 int值，float浮点值，bool布尔值</span><br><span class="hljs-comment"># 转换成str字符串值</span><br><span class="hljs-comment">#str()函数将其他数据类型转换成字符串，也可以用引号转换，用引号转简单</span><br><span class="hljs-comment">#int()函数将其他数据类型转换成整数，但是文字类和小数类字符串是无法转换成为整数的</span><br><span class="hljs-comment">#float()函数将其他数据类型转换成为浮点数，文字类无法转换成整数，整数转浮点数，末尾为.0</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w3&#x27;</span>,<span class="hljs-built_in">type</span>(<span class="hljs-built_in">int</span>(w3)))<span class="hljs-comment">#也是可以用引号转换</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(w1),<span class="hljs-built_in">type</span>(<span class="hljs-built_in">float</span>(w1)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w1&#x27;</span>,<span class="hljs-built_in">type</span>(<span class="hljs-built_in">float</span>(w1)))<span class="hljs-comment">#都可以用引号进行转换</span><br></code></pre></td></tr></table></figure><hr><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 天空北慕·</span><br><span class="hljs-comment"># 开发时间：2022/11/21 23:05</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你好&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;嘿嘿，</span><br><span class="hljs-string">多行注释&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><hr><h1 id="输入函数input"><a href="#输入函数input" class="headerlink" title="输入函数input()"></a>输入函数input()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 天空北慕·</span><br><span class="hljs-comment"># 开发时间：2022/11/21 23:17</span><br><span class="hljs-comment">#wo=input(&#x27;你想要什么礼物&#x27;)</span><br><span class="hljs-comment">#print(wo,type(&#x27;wo&#x27;))</span><br><span class="hljs-comment">#从键盘录入两个整数，计算两个数的和</span><br>a=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个加数:&#x27;</span>))<span class="hljs-comment">#可以在这直接进行转换，将输入的值转为int值</span><br><span class="hljs-comment">#a=int(a)#  将转换后得值存入a中</span><br>b=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入另一个整数:&#x27;</span>))<br><span class="hljs-comment">#b=int(b)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a),<span class="hljs-built_in">type</span>(b))<br><span class="hljs-built_in">print</span>(a+b)<br></code></pre></td></tr></table></figure><hr><h1 id="算术运算符中的标准运算符"><a href="#算术运算符中的标准运算符" class="headerlink" title="算术运算符中的标准运算符"></a>算术运算符中的标准运算符</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 天空北慕·</span><br><span class="hljs-comment"># 开发时间：2022/11/21 23:43</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>+<span class="hljs-number">1</span>)<span class="hljs-comment">#加法运算</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>-<span class="hljs-number">1</span>)<span class="hljs-comment">#减法运算</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>/<span class="hljs-number">1</span>)<span class="hljs-comment">#除法运算</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>*<span class="hljs-number">1000</span>)<span class="hljs-comment">#乘法运算</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">11</span>//<span class="hljs-number">2</span>) <span class="hljs-comment">#整除运算  只取整数，不取小数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">11</span>%<span class="hljs-number">2</span>)<span class="hljs-comment">#取余计算</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>**<span class="hljs-number">3</span>)<span class="hljs-comment">#表示的是2的3次方</span><br></code></pre></td></tr></table></figure><hr><h1 id="标准运算中一正一负，向下取整"><a href="#标准运算中一正一负，向下取整" class="headerlink" title="标准运算中一正一负，向下取整"></a>标准运算中一正一负，向下取整</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 天空北慕·</span><br><span class="hljs-comment"># 开发时间：2022/11/21 23:51</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">9</span>//<span class="hljs-number">4</span>)<span class="hljs-comment">#2</span><br><span class="hljs-built_in">print</span>(-<span class="hljs-number">9</span>//-<span class="hljs-number">4</span>)<span class="hljs-comment">#2</span><br><span class="hljs-built_in">print</span>(-<span class="hljs-number">9</span>//<span class="hljs-number">4</span>)<span class="hljs-comment">#-3一正一负的整数公式，向下取整</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">9</span>//-<span class="hljs-number">4</span>)<span class="hljs-comment">#-3</span><br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">9</span>%-<span class="hljs-number">4</span>)<span class="hljs-comment">#-3  公式   余数=被除数-除数*商   9-（-4）*（-3）9-12--&gt;  -3</span><br><span class="hljs-built_in">print</span>(-<span class="hljs-number">9</span>%<span class="hljs-number">4</span>)<span class="hljs-comment">#3                             -9-4*(-3)  -9+12--&gt;   3</span><br></code></pre></td></tr></table></figure><hr><h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#赋值运算符，计算顺序是从右到左</span><br>a=<span class="hljs-number">3</span>+<span class="hljs-number">4</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--链式赋值---&#x27;</span>)<br>b=c=d=<span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(b,<span class="hljs-built_in">id</span>(b))<br><span class="hljs-built_in">print</span>(c,<span class="hljs-built_in">id</span>(c))<br><span class="hljs-built_in">print</span>(d,<span class="hljs-built_in">id</span>(d))<br><br><span class="hljs-built_in">print</span>((<span class="hljs-string">&#x27;---支持参数赋值---&#x27;</span>))<br>a=<span class="hljs-number">20</span><br>a+=<span class="hljs-number">50</span><br><span class="hljs-built_in">print</span>(a)<br>a-=<span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(a)<br>a*=<span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(a)<br>a/=<span class="hljs-number">30</span><br><span class="hljs-built_in">print</span>(a)<br>a//=<span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(a)<br>a%=<span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----支持系列解包赋值---&#x27;</span>)<br>c,v,b=<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span><br><span class="hljs-built_in">print</span>(c,v,b)<br><span class="hljs-comment">#左右变量的个数和值得个数要对应，要不然就会报错</span><br>z,x=<span class="hljs-number">10</span>,<span class="hljs-number">21</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---交换两个变量的值--&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;交换之前:&#x27;</span>,z,x)<br><span class="hljs-comment">#交换</span><br>z,x=x,z,<br><span class="hljs-built_in">print</span>(z,x)<br></code></pre></td></tr></table></figure><hr><h1 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h1><h3 id="比较运算符和逻辑运算符"><a href="#比较运算符和逻辑运算符" class="headerlink" title="比较运算符和逻辑运算符"></a>比较运算符和逻辑运算符</h3><p>比较运算符有的地方也称为关系运算符，包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，我相信没有什么好解释的，大家一看就能懂，唯一需要提醒的是比较相等用的是<code>==</code>，请注意这个地方是两个等号，因为<code>=</code>是赋值运算符，我们在上面刚刚讲到过，<code>==</code>才是比较相等的比较运算符。比较运算符会产生布尔值，要么是<code>True</code>要么是<code>False</code>。</p><p>逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。<code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值，如果两个布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；左右两边的布尔值有一个是<code>False</code>，最终的运算结果就是<code>False</code>。相信大家已经想到了，如果<code>and</code>左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在<code>and</code>运算符左边为<code>False</code>的情况下，右边的表达式根本不会执行。<code>or</code>字面意思是“或者”，所以<code>or</code>运算符也会连接两个布尔值，如果两个布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，在它左边的布尔值为<code>True</code>的情况下，右边的表达式根本不会执行。<code>not</code>运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是<code>True</code>运算结果就是<code>False</code>，而后面的布尔值如果是<code>False</code>则运算结果就是<code>True</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#比较运算符   比较运算符的结果为BOOL类型</span><br>a,b=<span class="hljs-number">10</span>,<span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&gt;b吗&#x27;</span>,a&gt;b)<span class="hljs-comment">#false</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&lt;b吗&#x27;</span>,a&lt;b)  <span class="hljs-comment">#是</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&lt;=b吗&#x27;</span>,a&lt;=b)<span class="hljs-comment">#是</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&gt;=b吗&#x27;</span>,a&gt;=b)<span class="hljs-comment">#不是</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a==b吗&#x27;</span>,a==b)<span class="hljs-comment">#a等于b吗   no</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a!=b吗&#x27;</span>,a!=b)<span class="hljs-comment">#a不等于b吗   yes</span><br><span class="hljs-comment">#一个&#x27;=&#x27;是赋值运算符，==两个是比较运算符</span><br><span class="hljs-comment">#一个变量由三部分组成，标识，类型，值</span><br><span class="hljs-comment">#==比较的是值</span><br><span class="hljs-comment">#比较对象的标识，是is</span><br>a=<span class="hljs-number">10</span><br>b=<span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a==b)<span class="hljs-comment">#a和b的值相等</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<span class="hljs-comment">#a和b的标识相等</span><br>qq1=[<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>]<br>ww2=[<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>]<br><span class="hljs-built_in">print</span>(qq1==ww2)<br><span class="hljs-built_in">print</span>(qq1 <span class="hljs-keyword">is</span> ww2)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(qq1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(ww2))<br><span class="hljs-built_in">print</span>(qq1 <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> ww2)<br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> b)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">比较运算符和逻辑运算符的使用</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>flag0 = <span class="hljs-number">1</span> == <span class="hljs-number">1</span><br>flag1 = <span class="hljs-number">3</span> &gt; <span class="hljs-number">2</span><br>flag2 = <span class="hljs-number">2</span> &lt; <span class="hljs-number">1</span><br>flag3 = flag1 <span class="hljs-keyword">and</span> flag2<br>flag4 = flag1 <span class="hljs-keyword">or</span> flag2<br>flag5 = <span class="hljs-keyword">not</span> (<span class="hljs-number">1</span> != <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag0 =&#x27;</span>, flag0)    <span class="hljs-comment"># flag0 = True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag1 =&#x27;</span>, flag1)    <span class="hljs-comment"># flag1 = True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag2 =&#x27;</span>, flag2)    <span class="hljs-comment"># flag2 = False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag3 =&#x27;</span>, flag3)    <span class="hljs-comment"># flag3 = False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag4 =&#x27;</span>, flag4)    <span class="hljs-comment"># flag4 = True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag5 =&#x27;</span>, flag5)    <span class="hljs-comment"># flag5 = False</span><br></code></pre></td></tr></table></figure><p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以<code>flag0 = 1 == 1</code>先做<code>1 == 1</code>产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。<code>print</code>函数可以输出多个值，多个值之间可以用<code>,</code>进行分隔，输出的内容之间默认以空格分开。</p><hr><h1 id="内置函数range"><a href="#内置函数range" class="headerlink" title="内置函数range()"></a>内置函数range()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#内置函数range()三种创建方式</span><br><span class="hljs-string">&#x27;&#x27;&#x27;第一种，只有一个参数(小括号中只有一个数)&#x27;&#x27;&#x27;</span><br>q=<span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>)<span class="hljs-comment">#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],默认从零开始，默认相差1，称为步长</span><br><span class="hljs-built_in">print</span>(q)<span class="hljs-comment">#(0,20)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(q))<span class="hljs-comment">#用于查看range中的整数序列    ---&gt;list是列表的意思</span><br><span class="hljs-string">&#x27;&#x27;&#x27;第二种创建方式，给两个参数，(小括号中给两个数)&#x27;&#x27;&#x27;</span><br>w=<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>)<span class="hljs-comment">#[2, 3, 4, 5, 6, 7, 8, 9],指定了起始值，从2到10（不包含10），默认步长为1</span><br><span class="hljs-built_in">print</span>(w)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(w)<br><span class="hljs-string">&#x27;&#x27;&#x27;第三种创建方式，给三个参数，(小括号中给三个数)&#x27;&#x27;&#x27;</span><br>a=<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">30</span>,<span class="hljs-number">2</span>)<span class="hljs-comment">#[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(a))    <br><span class="hljs-string">&#x27;&#x27;&#x27;判断指定的整数 在序列中是否存在 in  not in&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">in</span> a)<span class="hljs-comment">#10不在当前的序列中</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">9</span> <span class="hljs-keyword">in</span> a)<span class="hljs-comment">#9，在当前的序列中    </span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> a)  <span class="hljs-comment">#10的确不在当前序列中  对</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">9</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> a)   <span class="hljs-comment">#判断错</span><br>s=<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">101</span>,<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(s))<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><hr><h1 id="循环结构while"><a href="#循环结构while" class="headerlink" title="循环结构while()"></a>循环结构while()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#a=1</span><br><span class="hljs-comment">#判断条件表达式</span><br><span class="hljs-comment">#while a&lt;10:  #循环体</span><br><span class="hljs-comment">#print (a)</span><br><span class="hljs-comment"># a+=1</span><br><span class="hljs-comment">#计算0到4之间的累加和</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">四步循环法</span><br><span class="hljs-string">1，初始化的变量</span><br><span class="hljs-string">2，条件判断</span><br><span class="hljs-string">3，条件执行体（循环体）</span><br><span class="hljs-string">4，改变变量</span><br><span class="hljs-string">总结：初始化的变量与条件判断的变量为同一个&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span><span class="hljs-comment">#用来存储累加和</span><br><span class="hljs-string">&#x27;&#x27;&#x27;初始化变量为0&#x27;&#x27;&#x27;</span><br>q=<span class="hljs-number">0</span><br><span class="hljs-string">&#x27;&#x27;&#x27;条件判断&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> q&lt;<span class="hljs-number">5</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;条件执行体（循环体）&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">sum</span>+=q<br>    <span class="hljs-comment">#改变变量</span><br>    q+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;和为:&#x27;</span>,<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><hr><h1 id="循环语句练习题"><a href="#循环语句练习题" class="headerlink" title="循环语句练习题"></a>循环语句练习题</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;计算1到100之间的偶数和&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span> <span class="hljs-comment">#存入偶数和</span><br><span class="hljs-string">&#x27;&#x27;&#x27;初始化变量&#x27;&#x27;&#x27;</span><br>a=<span class="hljs-number">1</span><br><span class="hljs-string">&#x27;&#x27;&#x27;条件判断&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> a&lt;=<span class="hljs-number">100</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;条件执行体（循环体）&#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment">#条件判断是否是偶数</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">bool</span>(a%<span class="hljs-number">2</span>):      <span class="hljs-comment">#a%2==0:</span><br>        <span class="hljs-comment">#改变判断条件即可实现偶数和由奇数和的变化</span><br>        <span class="hljs-built_in">sum</span>+=a<br>        <span class="hljs-string">&#x27;&#x27;&#x27;改变变量&#x27;&#x27;&#x27;</span><br>    a+=<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;1到100之间的偶数和&#x27;</span>,<span class="hljs-built_in">sum</span>)<br></code></pre></td></tr></table></figure><hr><h1 id="for-in语句循环"><a href="#for-in语句循环" class="headerlink" title="for-in语句循环"></a>for-in语句循环</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;python&#x27;</span>:  <span class="hljs-comment">#第一次取出来的值是p，然后将值赋值在item中，将item中输出</span><br>    <span class="hljs-built_in">print</span> (item)    <br>    <span class="hljs-comment">#range()产生一整个序列，也是一个可迭代对象</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    <span class="hljs-built_in">print</span> (i)<br>    <span class="hljs-comment">#如果在循环过程中不需要使用到自定义变量，可将自定义变量写为“_”</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5201314</span> ):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你好你好&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><h1 id="输出100到999之间的水仙花数"><a href="#输出100到999之间的水仙花数" class="headerlink" title="输出100到999之间的水仙花数"></a>输出100到999之间的水仙花数</h1><p><strong>通过for语句循环，if进行判断，然后找出水仙花数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">   <span class="hljs-comment">#举例</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>,<span class="hljs-number">1000</span>):<br>    q=i%<span class="hljs-number">10</span><br>    shi=i//<span class="hljs-number">10</span>%<span class="hljs-number">10</span><br>    bai=i//<span class="hljs-number">100</span><br>    <span class="hljs-comment"># print(q,shi,bai )</span><br>    <span class="hljs-comment">#判断</span><br>    <span class="hljs-keyword">if</span> q**<span class="hljs-number">3</span>+shi**<span class="hljs-number">3</span>+bai**<span class="hljs-number">3</span>==i:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><hr><h1 id="流程控制语句break"><a href="#流程控制语句break" class="headerlink" title="流程控制语句break"></a>流程控制语句break</h1><p><strong><code>break语句</code>，用于结束循环结构，通常和分支结构if一起使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#break语句，用于结束循环结构，通常和分支结构if一起使用</span><br><span class="hljs-string">&#x27;&#x27;&#x27;要求从键盘录入密码，最多录入三次，如果正确就结束&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    q=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密码:&#x27;</span>)<br>    <span class="hljs-keyword">if</span> q ==<span class="hljs-string">&#x27;9999&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码正确&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码不正确&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><h1 id="break语句循环体"><a href="#break语句循环体" class="headerlink" title="break语句循环体#"></a>break语句循环体#</h1><p><strong><code>break语句</code>是语句循环体，可以作为截止循环并重新进入下一次循环</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> a&lt;<span class="hljs-number">3</span>:<br>    q=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密码；&#x27;</span>)<br>    <span class="hljs-keyword">if</span> q==<span class="hljs-string">&#x27;0000&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码正确&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码不正确&#x27;</span>)<br>        a+=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="流程控制语句continue"><a href="#流程控制语句continue" class="headerlink" title="流程控制语句continue"></a>流程控制语句continue</h1><p><strong><code>continue语句</code> 用于结束当前循环，进入下一次循环，通常与分支结构中的if一起使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#continue语句 用于结束当前循环，进入下一次循环，通常与分支结构中的if一起使用，</span><br><span class="hljs-string">&#x27;&#x27;&#x27;要求输出1到50之间所有5的倍数，5，10,15,25。。。</span><br><span class="hljs-string">5的倍数的共同点：  和5的余数为0的数都是5的倍数</span><br><span class="hljs-string">要求是使用continue实现</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">1</span>,<span class="hljs-number">51</span>): <span class="hljs-comment">#通过for循环语句，求出1到51之间的5的倍数，</span><br>    <span class="hljs-keyword">if</span> item%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(item)<br><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;----使用coutinue----&#x27;</span>)<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">1</span>,<span class="hljs-number">51</span>):<br>    <span class="hljs-keyword">if</span> item%<span class="hljs-number">5</span>!=<span class="hljs-number">0</span>:<br>     <span class="hljs-keyword">continue</span> <span class="hljs-comment">#continue语句是为了结束循环，同时进入下一次循环。</span><br><span class="hljs-built_in">print</span> (item)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初始</title>
      <link href="/post/9970.html"/>
      <url>/post/9970.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="我一直在路上，从未停止，这一篇只是为了纪念今天。"><a href="#我一直在路上，从未停止，这一篇只是为了纪念今天。" class="headerlink" title="我一直在路上，从未停止，这一篇只是为了纪念今天。"></a>我一直在路上，从未停止，这一篇只是为了纪念今天。</h2><p><strong>我相信努力总会出成绩</strong></p><div class="fj-gallery"><p>[<img src="https://s1.ax1x.com/2023/01/06/pSAvDNF.jpg" alt="pSAvDNF.jpg">]</p>          </div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/16107.html"/>
      <url>/post/16107.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
